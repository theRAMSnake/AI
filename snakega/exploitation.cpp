#include "exploitation.hpp"
#include "decoder.hpp"
#include "neuroevolution/rng.hpp"
#include "logger/Logger.hpp"
#include <algorithm>

namespace snakega
{

Exploitation::Exploitation(const Pop& src, const std::size_t size, const std::size_t depth)
: mSrc(src)
, mSize(size)
, mDepth(depth)
{
    
}

Pop Exploitation::run(
   neuroevolution::IFitnessEvaluator& eval
   )
{
    for (std::size_t i = 0; i < mDepth; ++i)
    {
        if (mLocalPops.empty())
        {
            mLocalPops.reserve(mSize);
            mLocalPops.push_back(mSrc);

            while (mLocalPops.size() < mSize)
            {
                auto curPop = mSrc;
                curPop.mutateParameters();
                mLocalPops.push_back(curPop);
            };
        }
        else
        {
            reproduce();  
        }
        
        //Evaluation is disabled as something is broken in genom/decoder pair
        //evaluate(eval);
    }

    return mLocalPops[0];
}

void Exploitation::reproduce()
{
    const double MUTATION_CHANCE = 0.5;
    //Use selected genes of previous generation and mutate them to get new generation
    auto lastGen = mLocalPops;

    mLocalPops.clear();
    mLocalPops.push_back(mSrc);

    while (mLocalPops.size() < mSize)
    {
        auto pop = selectTournament(lastGen);

        if(Rng::genProbability(MUTATION_CHANCE))
        {
            pop.mutateParameters();
        }
        else
        {
            pop.mGenom.crossoverParametersFrom(selectTournament(lastGen).mGenom);    
        }

        mLocalPops.push_back(pop);
    }
}

static bool comparePopsByFitness(const Pop & a, const Pop & b)
{
    return a.fitness > b.fitness;
}

void Exploitation::evaluate(neuroevolution::IFitnessEvaluator& eval)
{
    for (auto& pop : mLocalPops)
    {
        auto agent = neuroevolution::NNAgent(pop.mGenom.getNumInputs(), pop.mGenom.getNumOutputs(), GenomDecoder::decode(pop.mGenom));
        pop.fitness = eval.evaluate(agent);
    }

    std::sort(mLocalPops.begin(), mLocalPops.end(), comparePopsByFitness);
}

}